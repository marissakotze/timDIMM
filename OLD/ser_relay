#!/usr/bin/env python
# $Id: ser_relay,v 1.13 2003/04/02 17:54:03 tom Exp $

import sys, re
from sys import stdout, exit, argv
from socket import *

import thread, os, select
# import termios, TERMIOS
import termios

# Number of 0.5 second ticks with no activity
# before we close the connection.
# Set to zero to have no timeout at all !!

max_idle = 0

# ser_relay - serial relay gizmo.
# acts as a server on a socket, and passes along
# whatever comes its way.
# Tom Trebisky  12/20/2001

# TODO
# fix a "1-second dead-time" problem.
# We reject (by closing the socket) connections
# while we are busy, but when a connection closes,
# it takes up to 1 full second for the serial
# thread to timeout on the select, so quick
# successive connections may be (and are) rejected.

# at this point, we have the following things
# wired up to serial ports on the mountain:
#
# Hacksaw ttyS0 - Neslab (9600)
#	(top on hacksaw athlon motherboard)
# Hacksaw ttyS1 - Instcon
#	(floor on hacksaw athlon motherboard)
# Hoseclamp ttyS0 - Carrier (9600)
#	(floor on BXDU motherboard)
# Hoseclamp ttyS1 - HP DAU (57600)
#	(top on BXDU motherboard)

# The Carrier gives a "?" as a prompt
# ask for a block of data via "RT 01 SETPOINT"
# or "RT 01 GENUNIT" (RT is "Read Table")
# the 01 is "unit number" (we only have one)

# -p [8001] selects alternate network port
# -b 2400 selects alternate baud rate
# -t /dev/ttyS1 selects alternate serial port

# Note, unless explicitly overriden, the following
# is obtained /dev/ttyS0 at 9600 baud on port 7001
# if /dev/ttyS1 is selected via -t, you get port 7002
# any of the above can be overriden by -p/-b/-t

def_serial = '/dev/tty.usbserial-A700dzoI'
def_baud = 9600
def_port = 7001

my_serial = None
my_baud = None
my_port = None

# hacked to remove references to TERMIOS and replace them with termios.
# also changed s.bind to pass a tuple which python2 appears to require. 
# 2/24/03 TEP

# bauds = {
# 	1200:	TERMIOS.B1200,
# 	2400:	TERMIOS.B2400,
# 	4800:	TERMIOS.B4800,
# 	9600:	TERMIOS.B9600,
# 	19200:	TERMIOS.B19200,
# 	57600:	TERMIOS.B57600
# }

bauds = {
	1200:	termios.B1200,
	2400:	termios.B2400,
	4800:	termios.B4800,
	9600:	termios.B9600,
	19200:	termios.B19200,
	57600:	termios.B57600
}

run = None
busy = None
count = 0

skip = None
argc = len(sys.argv)

for i in range ( 1, argc ) :
	if skip :
		skip = None
	else :
		a = sys.argv[i]
		if a == "-t" :
			if argc > i+1 :
				my_serial = sys.argv[i+1]
			skip = 1
		elif a == "-b" :
			if argc > i+1 :
				my_baud = sys.argv[i+1]
			skip = 1
		if a == "-p" :
			if argc > i+1 :
				my_port = sys.argv[i+1]
			skip = 1
		else :
			pass

if not my_serial : my_serial = def_serial

if not my_port :
    my_port = def_port
    if re.search( "ttyS1", my_serial ) :
    	my_port = def_port + 1

if my_baud : my_baud = int ( my_baud )
else : my_baud = def_baud

if bauds.has_key(my_baud) :
	pass
else :
	print "sorry, baud rate %d not available" % my_baud
	sys.exit()

print "Running on port: %s, at %d baud on port %d" % \
		(my_serial, my_baud, my_port)

#sys.exit ()

def setser ( f, baud ) :
    baud = bauds[baud]
    old = termios.tcgetattr ( f )
    new = termios.tcgetattr ( f )
#     new[0] = new[0] & ~TERMIOS.ICRNL    # iflag
#     new[1] = new[1] & ~TERMIOS.ONLCR    # oflag
#     new[1] = new[1] & ~TERMIOS.OCRNL    # oflag
#     new[3] = new[3] & ~TERMIOS.ICANON   # lflag
#     new[3] = new[3] & ~TERMIOS.ECHO	# lflag
    new[0] = new[0] & ~termios.ICRNL    # iflag
    new[1] = new[1] & ~termios.ONLCR    # oflag
    new[1] = new[1] & ~termios.OCRNL    # oflag
    new[3] = new[3] & ~termios.ICANON   # lflag
    new[3] = new[3] & ~termios.ECHO	# lflag
    new[4] = baud			# ispeed
    new[5] = baud			# ospeed
    termios.tcsetattr ( f, termios.TCSANOW, new )

# runs as thread to listen to socket,
#  and copy to serial port.
# Add timeout business 1/5/2002
# If we are idle more than 2 seconds, we disconnect.

def sock2ser (s,f) :
    global run
    global count

    print "starting sock2ser"

    no_eof = 1
    while no_eof:
	try:
	    inp, out, ex = select.select ( [s], [], [], 0.5 )
	    count = count + 1
	    for x in inp :	# we never use x, but OK
		data = s.recv(100)
		if data:
		    os.write ( f, data )
		    count = 0
		else:
		    no_eof = None
		    break

	    if max_idle and count > max_idle :
		print "sock2ser timed out"
	    	break
        except:
	    print "sock2ser exception"
	    (ty,val,tb) = sys.exc_info()
	    print "exception type = ", ty
	    print "exception value = ", val
	    break

    run = None
    print "leaving sock2ser"
    thread.exit()

# Runs as thread to read serial port,
#  and copy to socket.

def ser2sock (s,f) :
    global run
    global busy
    global count

    print "starting ser2sock"
    while run:
	inp, out, ex = select.select ( [f], [], [], 1.0 )
	for x in inp :	# we never use x, but OK
	    data = os.read ( f, 100 )
	    s.send ( data )
	    count = 0

    s.close ()
    busy = None
    print "Connection done, going idle"
    print "leaving ser2sock"

# --------------------------------------
# a new connection on the socket, do a serial relay thing.
# This just starts threads and returns immediately.

def newcon ( s, f, peer ) :
    addr, port = peer
    global run

#    name, aliases, addresses = gethostbyaddr ( addr )

    count = 0
    run = 1
    thread.start_new_thread ( sock2ser, (s, f) );
    thread.start_new_thread ( ser2sock, (s, f) );

# --------------------------------------
# This function makes this act as an echo server.
# XXX - (old, for debug, no longer used)

def newcon2 ( s, peer ) :
    addr, port = peer

#    name, aliases, addresses = gethostbyaddr ( addr )

    while 1: 
	data = s.recv(100)
	if not data: break
	s.send ( data )

    s.close ()

# ----------------------------------------------------------
# OK, start the show here.

f = os.open ( my_serial, os.O_RDWR )
setser ( f, my_baud )

s = socket ( AF_INET, SOCK_STREAM )
#s.bind ( '', my_port )
s.bind ( ('', my_port) )
s.listen ( 1 )

print "relay process starting up"

while 1:
    print "ready to accept new connection"
    c, peer = s.accept ()
    print "Connection from", peer

    if busy :
	print "busy, closing that connection"
    	c.close ()
	continue

    busy = 1

    active, apeer = c, peer
#   newcon2 ( active, apeer )
    newcon ( active, f, apeer )

# never gets here.
s.close ()
f.close ()
exit ()	# needless

# THE END
